//------------------
// DB UPDATES
//------------------

(message)
    * Timestamp -> Time_Created
    + Deleted (bit)
    + Time_Updated (timestamp)
    - Character_Name
    + Chara_Number (int)
        UPDATE `message` SET `Chara_Number` = (SELECT `Number` FROM `character` WHERE `message`.`Room` = `character`.`Room` AND `character`.`Name` = `Character_Name`)

+ message_update
    Number (int) PRIMARY KEY
    Message_Number (int)
    Action (['delete', 'undelete'])
    Time (timestamp)
    IP (varchar(45))

(chara)
    * Timestamp -> Time_Created
    + Deleted (bit)
    + Time_Updated (timestamp)

+ chara_update
    Number (int) PRIMARY KEY
    Chara_Number (int)
    Action (['delete', 'undelete'])
    Time (timestamp)
    IP (varchar(45))

(room)
    * Timestamp -> Time_Created



//-------------------
// BACKEND FUNCTIONS
//-------------------

[GET|html] /
  id
  title
  description
  creator


{id}/ajax/...
                  
[GET|json] .../page/{n}
  msgs[]
  charas[]
  numPages

[GET|json] .../chat
  msgs[]
  charas[]
  msgCounter
  charaCounter
  upMsgCounter
  upCharaCounter
  postsPerPage
  refreshMillis

[GET|json] .../updates    (msgCounter, charaCounter, upMsgCounter, upCharaCounter)
  newMsgs[]?
  newCharas[]?
  updatedMsgs[]?
  updatedCharas[]?

[GET|file] .../export     (format, ooc)
  (FILE)

[POST] .../send-message   (content, type, [name, [color]])
[POST] .../send-chara     (name, color)
[POST] .../del-message    (id)
[POST] .../del-chara      (id)
[POST] .../undel-message  (id)
[POST] .../undel-chara    (id)



//-------------------
// ROOMJS FUNCTIONS
//-------------------

RP( 'abcd', ready(rp) );

rp.id
rp.title
rp.description
rp.creator

rp.getPage( pageNum, ready({ msgs[] }) );

rp.chat();
chat.id
chat.charas[]
chat.msgs[]
chat.onLoad(callback(msgs, charas))
chat.onMessage(callback(msg))
chat.onChara(callback(chara))
chat.onUpdateMessage(callback(update))
chat.onUpdateChara(callback(update))
chat.onUnloadMessage(callback(msg))

chat.sendMessage( message, type, [chara, [color]] );
chat.sendChara( name, color );
chat.deleteMessage( id );
chat.deleteChara( id );
chat.undeleteMessage( id );
chat.undeleteChara( id );

msg.id
msg.content
msg.timeSent
msg.timeUpdated
msg.user
msg.type // in ['Character', 'Narrator', 'OOC']
msg.charaId // for 'Character' type only
msg.chara // for 'Character' type only
msg.deleted
msg.createElement(timestampFormat = 'absolute')

msgUpdate.id
msgUpdate.time
msgUpdate.action // in ['Delete', 'Undelete']
msgUpdate.user

oocThread.type // always 'OOCString'
oocThread.msgs[]
oocThread.element

chara.id
chara.name
chara.color
chara.textColor
chara.user
chara.deleted
chara.createButton(callback)

user.anon
user.name // for anon=false
user.colors[] // for anon=true
user.createIcon()